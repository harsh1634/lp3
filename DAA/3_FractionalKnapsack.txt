class Item:
    def __init__(self, value, weight):
        self.value = value
        self.weight = weight
        self.value_per_weight = value / weight

def fractional_knapsack(items, capacity):
    # Sort items by value-to-weight ratio in descending order
    items.sort(key=lambda x: x.value_per_weight, reverse=True)
    
    total_value = 0.0  # Total maximum value accumulated in the knapsack
    for item in items:
        if capacity > 0 and item.weight <= capacity:
            # Take the whole item
            capacity -= item.weight
            total_value += item.value
        else:
            # Take the fraction of the item that fits
            fraction = capacity / item.weight
            total_value += item.value * fraction
            break  # Knapsack is full
    
    return total_value

# User input for number of items and knapsack capacity
n = int(input("Enter the number of items: "))
capacity = float(input("Enter the capacity of the knapsack: "))

items = []
for i in range(n):
    value = float(input(f"Enter value of item {i+1}: "))
    weight = float(input(f"Enter weight of item {i+1}: "))
    items.append(Item(value, weight))

# Calculate the maximum value we can get
max_value = fractional_knapsack(items, capacity)
print(f"The maximum value of items that can fit into the knapsack is: {max_value}")
