import heapq

class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    # Define comparison operators for heapq
    def __lt__(self, other):
        return self.freq < other.freq

# T.C = O(k logk)
# S.C = O(k)
def build_huffman_tree(frequencies):
    # Create a priority queue (min-heap) using heapq
    heap = [Node(char, freq) for char, freq in frequencies.items()]
    heapq.heapify(heap)

    while len(heap) > 1:
        # logk
        # Pop the two nodes with the smallest frequency
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)

        # Create a new internal node with these two nodes as children
        merged = Node(None, left.freq + right.freq)
        merged.left = left
        merged.right = right

        # Push the new node back into the heap
        heapq.heappush(heap, merged)

    # The remaining node is the root of the Huffman tree
    return heap[0]

# T.C = O(k)
# S.C = O(k)
def generate_codes(node, current_code="", codes={}):
    if node is not None:
        if node.char is not None:  # Leaf node
            codes[node.char] = current_code
        generate_codes(node.left, current_code + "0", codes)
        generate_codes(node.right, current_code + "1", codes)
    return codes

# n is length of input string
# T.C = O(n) 
def huffman_encoding(data):
    # Count frequency of each character
    frequencies = {}
    for char in data:
        if char not in frequencies:
            frequencies[char] = 0
        frequencies[char] += 1

    # Build Huffman Tree
    huffman_tree = build_huffman_tree(frequencies)

    # Generate Huffman Codes
    huffman_codes = generate_codes(huffman_tree)

    # Encode the input data
    encoded_data = ''.join(huffman_codes[char] for char in data)

    return encoded_data, huffman_codes

def main():
    data = input("Enter the string to be encoded: ")
    encoded_data, huffman_codes = huffman_encoding(data)

    print("Huffman Codes:")
    for char, code in huffman_codes.items():
        print(f"'{char}': {code}")
    
    print("Encoded Data:", encoded_data)

if __name__ == "__main__":
    main()
