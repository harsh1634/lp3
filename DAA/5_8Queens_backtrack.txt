# Function to print the chessboard solution
def print_board(board):
    for row in board:
        print(" ".join(cell for cell in row))
    print()

# Check if placing a queen at (row, col) is safe
def is_safe(board, row, col, n):
    # Check the same column
    for i in range(row):
        if board[i][col] == "Q":
            return False

    # Check the upper-left diagonal
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j] == "Q":
            return False
        i -= 1
        j -= 1

    # Check the upper-right diagonal
    i, j = row, col
    while i >= 0 and j < n:
        if board[i][j] == "Q":
            return False
        i -= 1
        j += 1

    return True

# Backtracking function to place queens on the board
def solve(board, row, n):
    # If all queens are placed, return True
    if row >= n:
        print_board(board)
        return True

    # Try placing a queen in each column of the current row
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = "Q"  # Place the queen
            if solve(board, row + 1, n):  # Recur for the next row
                return True
            board[row][col] = "_"  # Backtrack if placing fails

    return False

# Initialize the board and place the first queen
def place_first_queen_and_solve(n, first_queen_position):
    board = [["_"] * n for _ in range(n)]  # Create an empty n x n board
    row, col = first_queen_position
    board[row][col] = "Q"  # Place the first queen

    if not solve(board, row + 1, n):  # Start placing remaining queens
        print("Solution not found!")

# Example usage
n = 8  # Size of the chessboard (8x8)
first_queen_position = (0, 0)  # First queen placed at (0, 0)
place_first_queen_and_solve(n, first_queen_position)
